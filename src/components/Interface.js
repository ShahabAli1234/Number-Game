import React, { useEffect, useState } from 'react';
import '../App.css';

export default function Interface() {
    const [show, setShow] = useState(false);
    const [noToGuess, setNoToGuess] = useState('');
    const [guessedInput, setGuessedInput] = useState('');
    const [correctCount, setCorrectCount] = useState(0);
    const [guessHistory, setGuessHistory] = useState([]);
    const [gameWon, setGameWon] = useState(false);
    const [showInfo, setShowInfo] = useState(false);

    useEffect(() => {
        resetGame();
    }, []);

    function showHide() {
        setShow(!show);
    }
    function toggleInfo() {
        setShowInfo(!showInfo);
    }
    function getNum(e) {
        e.preventDefault();
        const allSameDigits = guessedInput.split('').every((digit) => digit === guessedInput[0]);
        if (allSameDigits) {
            alert('All four digits cannot be the same (e.g., 1111, 2222, etc.). Please enter a valid guess.');
            return;
        }

        if (guessedInput.length !== 4) {
            alert('Please enter a 4-digit guess.');
            return;
        }

        let correctDigits = 0;
        for (let i = 0; i < 4; i++) {
            if (guessedInput[i] === noToGuess[i]) {
                correctDigits += 1;
            }
        }

        setCorrectCount(correctDigits);
        setGuessHistory((prevHistory) => [
            ...prevHistory, 
            { guess: guessedInput, correct: correctDigits }
        ]);

        setGuessedInput('');

        if (correctDigits === 4) {
            setGameWon(true);
            setGuessHistory([]);
        }
    }

        useEffect(() => {
            let randNoGuess = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
            setNoToGuess(randNoGuess);
        }, [])
        
        if (show === true){
            setTimeout(() => {
                window.confirm("Now game will be restart and number is also changed because you see the number")
                setShow(false)
                let randNoGuess = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
                setNoToGuess(randNoGuess);
                resetGame()
            }, 3000);
        }
    function resetGame() {
        setGuessHistory([]);
        setCorrectCount(0);
        setGuessedInput('');
        setGameWon(false);
        setShow(false);
    }

    return (
        <div className="main">
            {/* Top corner "How the Game Works" button */}
            <button onClick={toggleInfo} className="infoButton"> <i className="fa-solid fa-circle-info"></i></button>

            {showInfo && (
                <div className="infoModal">
                    <div className="infoContent">
                        <h2>How the Game Works</h2>
                        <p>In this guessing game, try to guess a 4-digit number generated by the system. Each digit should be unique, and all four cannot be the same (e.g., 1111, 2222, etc.).</p>
                        <p>After each guess, you‚Äôll be told how many digits you guessed correctly. The game ends when you guess all four digits correctly. Good luck!</p>
                        <button onClick={toggleInfo} className="closeButton">Close</button>
                    </div>
                </div>
            )}

            <div className="noToGuess">
                <h2>{show || gameWon ? noToGuess : '‚óè‚óè‚óè‚óè'}</h2>
                <button onClick={showHide} className='buttShow'>
                    <i className={`fa-solid fa-eye${show || gameWon ? '-slash' : ''}`}></i>
                </button>
            </div>

            {!gameWon && (
                <div className="guessed">
                    <form onSubmit={getNum}>
                        <input
                            type="text"
                            className='guessedInput'
                            placeholder='Enter your guess'
                            value={guessedInput}
                            onChange={(e) => setGuessedInput(e.target.value)}
                            autoFocus={true}
                        />
                        <input type="submit" value="Guess" />
                    </form>
                </div>
            )}

            {gameWon && (
                <div className="successMessage">
                    <h3 className="congratsText">üéâ Congratulations! You guessed all digits correctly! üéâ</h3>
                    <button className="playAgainButton" onClick={resetGame}>Play Again</button>
                </div>
            )}

            <div className="tableContainer">
                <table className="guessTable">
                    <thead>
                        <tr>
                            <th>Guess Number</th>
                            <th>Correct</th>
                        </tr>
                    </thead>
                    <tbody>
                        {guessHistory.map((entry, index) => (
                            <tr key={index}>
                                <td>{entry.guess}</td>
                                <td>{entry.correct}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}
